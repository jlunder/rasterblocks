README


This is the (minimal) documentation for rasterblocks.


BUILDING

There are 3 supported builds currently:

1. Host testing build -- recent Mac OS X and Ubuntu 14.04 supported on Intel.
   This build supports audio input via OpenAL or ALSA, depending on platform,
   and output via OpenGL in a test window, or direct to a PixelPusher to
   actually control LEDs. MIDI input is currently not available.

2. Target build -- rasterblocks can be built directly on the Beaglebone. This
   build supports all target platform features; essentially, everything except
   OpenGL output.
   If you do this and you plan on running the build directly rather than
   installing the .deb package, keep in mind you need to copy
   "rb-pruss-io-00A0.dtbo" from the bin folder to /lib/firmware first! Also,
   you will probably need to disable the HDMI device tree overlay. See the
   "Installing On The BeagleBone" section below for details.

3. Target cross-build -- if you want, you can cross-build for the Beaglebone
   from Ubuntu 14.04 on Intel. The full package build is supported -- it
   generate a package and executable that function identically to the ones
   built on the Beaglebone.


INSTALLING ON THE BEAGLEBONE

There is one special gotcha regarding the BeagleBone: by default, in the
BeagleBone Debian build, the HDMI device tree overlay is loaded. This
conflicts with the PRUSS I/O; if you're planning to use PRUSS output or PRUSS
input, you'll need to disable it.

The easiest way is to edit the uEnv.txt in /boot/uboot/uEnv.txt:

# vi /boot/uboot/uEnv.txt

Look for the line labeled “##Disable HDMI”. Uncomment it. It should look
something like:

optargs=capemgr.disable_partno=BB-BONELT_HDMI,BB-BONELT_HDMIN

Now reboot, and you should be good to go.


HOST BUILD (on Intel/Linux, OS X)

Building on host after you install any dependendencies you are missing, simply
"make bin/rasterblocks". Note that if you "make all" it will try to do a
cross-build which is not what you want.


You need to install some extra packages to do local development on Ubuntu
14.04 (trusty):

sudo apt-get install libgles2-mesa-dev
sudo apt-get install libsdl2-dev
sudo apt-get install libglfw-dev

sudo apt-get install libjson0 libjson0-dev


When running the local test system, a couple command-line parameters are
helpful:

-og                   # output to OpenGL; default is to output to the
                      # PixelPusher!

-c <config_file_path> # specify the path to the initial config file

-it                   # run in test mode using internally-generated audio

-ia <audio_hw>        # run using actual audio input via ALSA; param is usually
                      # "plughw:1" for an external USB audio device, or
                      # "plughw:0" for the default internal audio device.

-op <address>         # output to PixelPusher at <address>; useful if you
                      # don't have the PP at the default address.

-v                    # log verbosely. REALLY verbosely.

-m <mode>             # start in debug mode <mode>; 0-5 valid, 0 is normal run


TARGET BUILD (on Beaglebone/Debian)

This is the simplest configuration; "make all" from this folder should build
both bin/rasterblocks.target and the package, bin/rasterblocks-1.0_armhf.deb.

There is a debug build available for development on target as well, with
optimizations disabled. "make bin/rasterblocks.target-debug" to build it.


CROSS-BUILD

If you want to do a full cross-build, then you need to run the
./setup-target-build-environment script found in this folder first to set up
your build environment; after that, just "make". The default target builds
"bin/rasterblocks-1.0_armhf.deb"; copy that to the target platform, install
it, and it should just go. There should not be any extra runtime dependencies
not already on the BBB.

It's best if the BBB is connected to the network during installation so npm
setup can fetch dependencies.


NODE.JS SERVER

When working on the nodeserver, you need to "npm install" to get
dependencies of the code installed alongside.

Then, to launch the server:

node server.js <path to config file>



DESIGN

Here are some brief notes on the design and implementation of Rasterblocks.


WHAT IS RASTERBLOCKS

Rasterblocks is the control software in a system that generates light displays
for LED video walls, which react to music.

It's got a variety of front ends for gathering audio and back ends for
interfacing with different lighting systems, and it's also got a variety of
video generation algorithms. The intent is for it to be fairly configurable at
runtime, although right now the setup of the video generation is fairly fixed
if you can't recompile the program.


HOW IT IS STRUCTURED

The design philosophy behind rasterblocks is KISS. There is not much
speculative abstraction. This is a conscious design decision to make reading,
navigating, and stepping through the source code easier. The tradeoff is that
the coupling of the modules is a little stronger than it maybe needs to be. As
the number of different input and output options has proliferated, future work
could be profitably focused on reducing the coupling of modules.

The program is structured generally as a pipeline, receiving input (audio and
controls) and then feeding it through successive stages. There are 5 distinct
stages:

1. Gather input (audio and, if available, controls)
2. Analyze the audio
3. Generate video from the audio
4. Format the video to match the physical arrangement of the LEDs
5. Generate the correct electrical signal to drive the LEDs

At each stage, the data undergoes a transformation; generally each stage has
an input data type and output data type, and they're different.

If you are looking at rasterblocks for the first time, you probably want to
orient yourself by looking at these key functions first:

- main() in target_harness.c: this is the simplest harness, and it's also the
  one that executes on the target platform, so it's really the most important.

- rbProcess(), and particularly rbProcessSubsystems() in rasterblocks.c: these
  are the core of the frame loop.

This should be enough to give you context and make it clear how the data is
transformed.


INTERESTING SUBSYSTEM DESIGN FEATURES

There are a few subsystem features worth calling out.


Shared-Memory PRU Communication

Communication between the PRUs and the host uses a simple ownership-passing
technique: each buffer is owned by either the host or one of the PRUs. This
relies on the atomicity of word-length memory writes, but doesn't require an
atomic compare-exchange or anything of the sort, which is important because
the PRU doesn't have any advanced atomic operations or bus locking
instructions.

Fancier locking or coordination would have to use a peripheral like the
mailbox.

Messages are placed in the buffer, then ownership is transferred to the
recipient. For this to work, each CPU can only access the buffer if it is the
owner -- setting ownership has to be the last thing it does, and ownership
cannot be reclaimed, it has to be given back (which is a problem for triple-
buffering techniques which need this).

This technique is used by both the PRUs.


PRU Input Poll Timing

The input polling in pruss_io_pru0.p is worth looking at. Careful sequencing
will allow the UART to be polled while running the ADC (only ADC poll is
implemented at the moment); timing is derived from PRUSS clock via the PRU's
instruction counter. The comments in the assembler explain the sequencing.


Pluggable Image Generators

The one plugin abstraction implemented is in the image generators. See
light_generation.c; there is a template at the end of that file for a basic
generator plugin.

The pluggable generators allow different effects to be composited together to
make more complex, layered, varied effects from a smaller number of building
blocks.


Configuration Hot-Reload

The communication method between the web app and rasterblocks is extremely
simple: rasterblocks watches the config file, constantly polling its mtime
by calling stat(). The web app writes a new config file (using the atomic-
write trick of writing the file to a new name temporarily, then renaming it to
the proper name, to avoid having rasterblocks try to load a partial config
file). When the mtime changes, the config is reloaded.

The reload/reinit path mostly reuses the shutdown/startup machinery; see
configuration.c and rasterblocks.c to see how this is sequenced.

Reload mostly involves having the init path called again without shutdown;
this means the subsystem init functions must be resilient to this. This is
typically implemented by calling shutdown as the first part of the init, but
there is room for faster reinit paths to be implemented without needing a lot
of extra machinery.


SIGBREAK Handling

In target_harness.c, a signal handler is installed to gracefully shut down if
SIGBREAK is received. A double signal forces abort, so this shouldn't cause
the program to get stuck.

This is important because the PRUs don't actually necessarily get cleaned up
completely (or at all) by the kernel without a clean exit.


FUTURE WORK

Here are a few ideas for future improvements and features:

- Scripting to handle the initialization of image generators; this could even
  include scripting custom image generation code.

- Implement functions to load external resources (like images) at runtime.

- Modify the PRU code to read from/write to external DRAM instead of being
  restricted to PRU local RAM, so it can use larger buffers (and more of them)
  to prevent frame dropping, which is currently an issue.

- Implement stricter timing of output, possibly via PRU-PRU communication.
  This implies some kind of structured way of handling frame drops (hopefully
  including intelligence in the main loop to skip image gen when we're behind
  frames)

- Clean up the audio input code; it doesn't really follow patterns established
  for other modules, or even any kind of consistent patterns really.

- Design a plugin architecture for the input and output modules, and refactor
  them to use it.

- Performance improvements: reimplement the graphics code using NEON
  intrinsics or hardware video acceleration.

- Implement a mapping system for controller inputs, so MIDI controller/note
  on/etc. messages can be mapped via the config file and reconfigured at
  runtime.

- Fix the high-pass filter, which currently I believe has a phase issue that
  causes it to pass a small amount of low frequency.

